// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SauceNAO.Infrastructure;

#nullable disable

namespace SauceNAO.Infrastructure.Migrations
{
    [DbContext(typeof(SauceNaoContext))]
    [Migration("20230609044104_SauceUrls")]
    partial class SauceUrls
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SauceNAO.Core.Entities.AntiCheat", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"), 1L, 1);

                    b.Property<long>("AddedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BotId")
                        .HasColumnType("bigint");

                    b.Property<int>("ChatKey")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("ChatKey");

                    b.ToTable("AntiCheat", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.SauceUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SauceKey")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SauceKey");

                    b.ToTable("SauceUrl", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.SuccessfulSauce", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUniqueId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Similarity")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Key");

                    b.HasIndex("FileUniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_FileUniqueId");

                    b.ToTable("Sauce", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.TelegramGroup", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InviteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<long?>("LinkedChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Key");

                    b.ToTable("Group", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.UserData", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LangForce")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("Start")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("User", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.UserSauce", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SauceId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.HasIndex("SauceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSauce", "tg");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.AntiCheat", b =>
                {
                    b.HasOne("SauceNAO.Core.Entities.UserData", "AddedByUser")
                        .WithMany("AntiCheats")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SauceNAO.Core.Entities.TelegramGroup", "Group")
                        .WithMany("AntiCheats")
                        .HasForeignKey("ChatKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.SauceUrl", b =>
                {
                    b.HasOne("SauceNAO.Core.Entities.SuccessfulSauce", "Sauce")
                        .WithMany("Urls")
                        .HasForeignKey("SauceKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.UserSauce", b =>
                {
                    b.HasOne("SauceNAO.Core.Entities.SuccessfulSauce", "Sauce")
                        .WithMany("UserSauces")
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SauceNAO.Core.Entities.UserData", "User")
                        .WithMany("UserSauces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sauce");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.SuccessfulSauce", b =>
                {
                    b.Navigation("Urls");

                    b.Navigation("UserSauces");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.TelegramGroup", b =>
                {
                    b.Navigation("AntiCheats");
                });

            modelBuilder.Entity("SauceNAO.Core.Entities.UserData", b =>
                {
                    b.Navigation("AntiCheats");

                    b.Navigation("UserSauces");
                });
#pragma warning restore 612, 618
        }
    }
}
